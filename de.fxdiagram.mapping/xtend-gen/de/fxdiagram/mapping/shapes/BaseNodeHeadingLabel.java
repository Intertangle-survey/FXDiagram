package de.fxdiagram.mapping.shapes;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.mapping.IMappedElementDescriptor;
import de.fxdiagram.mapping.shapes.BaseNodeLabel;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ModelNode
@SuppressWarnings("all")
public class BaseNodeHeadingLabel<T extends Object> extends BaseNodeLabel<T> {
  public BaseNodeHeadingLabel(final IMappedElementDescriptor<T> descriptor) {
    super(descriptor);
  }
  
  @Override
  protected Node createNode() {
    Node _createNode = super.createNode();
    final Procedure1<Node> _function = (Node it) -> {
      Insets _insets = new Insets(10, 20, 10, 20);
      StackPane.setMargin(this, _insets);
      Text _text = this.getText();
      String _family = this.getText().getFont().getFamily();
      double _size = this.getText().getFont().getSize();
      double _multiply = (_size * 1.1);
      _text.setFont(Font.font(_family, FontWeight.BOLD, _multiply));
    };
    return ObjectExtensions.<Node>operator_doubleArrow(_createNode, _function);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public BaseNodeHeadingLabel() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
}
