package de.fxdiagram.mapping.shapes;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.XLabel;
import de.fxdiagram.core.model.DomainObjectDescriptor;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.mapping.AbstractMapping;
import de.fxdiagram.mapping.IMappedElementDescriptor;
import de.fxdiagram.mapping.XDiagramConfig;
import de.fxdiagram.mapping.reconcile.LabelReconcileBehavior;

@ModelNode
@SuppressWarnings("all")
public class BaseNodeLabel<T extends Object> extends XLabel {
  public BaseNodeLabel(final IMappedElementDescriptor<T> descriptor) {
    super(descriptor);
  }
  
  @Override
  public void postLoad() {
    IMappedElementDescriptor<T> _domainObjectDescriptor = this.getDomainObjectDescriptor();
    AbstractMapping<T> _mapping = null;
    if (_domainObjectDescriptor!=null) {
      _mapping=_domainObjectDescriptor.getMapping();
    }
    XDiagramConfig _config = null;
    if (_mapping!=null) {
      _config=_mapping.getConfig();
    }
    if (_config!=null) {
      _config.initialize(this);
    }
  }
  
  @Override
  public IMappedElementDescriptor<T> getDomainObjectDescriptor() {
    DomainObjectDescriptor _domainObjectDescriptor = super.getDomainObjectDescriptor();
    return ((IMappedElementDescriptor<T>) _domainObjectDescriptor);
  }
  
  @Override
  public void doActivate() {
    super.doActivate();
    LabelReconcileBehavior _labelReconcileBehavior = new LabelReconcileBehavior(this);
    this.addBehavior(_labelReconcileBehavior);
  }
  
  @Override
  public String getType() {
    return this.getDomainObjectDescriptor().getMapping().getID();
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public BaseNodeLabel() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
  
  public String toString() {
    return ToString.toString(this);
  }
}
