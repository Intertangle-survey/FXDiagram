package de.fxdiagram.eclipse.ecore;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.eclipse.ecore.EcoreDomainObjectProvider;
import de.fxdiagram.mapping.AbstractMappedElementDescriptor;
import de.fxdiagram.mapping.IMappedElementDescriptorProvider;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Collections;
import java.util.NoSuchElementException;
import javafx.beans.property.ReadOnlyStringProperty;
import javafx.beans.property.ReadOnlyStringWrapper;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.ui.IEditorPart;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;

@ModelNode({ "uri", "name" })
@SuppressWarnings("all")
public class EcoreDomainObjectDescriptor extends AbstractMappedElementDescriptor<EObject> {
  public EcoreDomainObjectDescriptor(final String uri, final String name, final String mappingConfigID, final String mappingID) {
    super(mappingConfigID, mappingID);
    this.uriProperty.set(uri);
    this.nameProperty.set(name);
  }
  
  @Override
  public EcoreDomainObjectProvider getProvider() {
    IMappedElementDescriptorProvider _provider = super.getProvider();
    return ((EcoreDomainObjectProvider) _provider);
  }
  
  @Override
  public <U extends Object> U withDomainObject(final Function1<? super EObject, ? extends U> lambda) {
    final EObject element = this.getProvider().resolveEObject(this.getUri());
    if ((element != null)) {
      return lambda.apply(element);
    } else {
      String _uri = this.getUri();
      String _plus = ("Cannot resolve EObject " + _uri);
      throw new NoSuchElementException(_plus);
    }
  }
  
  @Override
  public Object openInEditor(final boolean select) {
    IEditingDomainProvider _xblockexpression = null;
    {
      final URI theURI = URI.createURI(this.getUri());
      _xblockexpression = this.getProvider().openEditor(theURI, select);
    }
    return _xblockexpression;
  }
  
  protected Object setSelection(final IEditorPart editor, final EObject selectedElement) {
    Object _xtrycatchfinallyexpression = null;
    try {
      Object _xblockexpression = null;
      {
        final Method method = editor.getClass().getMethod("setSelectionToViewer", Collection.class);
        _xblockexpression = method.invoke(editor, Collections.<EObject>singletonList(selectedElement));
      }
      _xtrycatchfinallyexpression = _xblockexpression;
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception exc = (Exception)_t;
        exc.printStackTrace();
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return _xtrycatchfinallyexpression;
  }
  
  @Override
  public boolean equals(final Object obj) {
    if ((obj instanceof EcoreDomainObjectDescriptor)) {
      return (Objects.equal(((EcoreDomainObjectDescriptor)obj).getUri(), this.getUri()) && Objects.equal(((EcoreDomainObjectDescriptor)obj).getName(), this.getName()));
    } else {
      return false;
    }
  }
  
  @Override
  public int hashCode() {
    int _hashCode = super.hashCode();
    int _hashCode_1 = this.getUri().hashCode();
    int _multiply = (563 * _hashCode_1);
    int _plus = (_hashCode + _multiply);
    int _hashCode_2 = this.getName().hashCode();
    int _multiply_1 = (547 * _hashCode_2);
    return (_plus + _multiply_1);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public EcoreDomainObjectDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(uriProperty, String.class);
    modelElement.addProperty(nameProperty, String.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private ReadOnlyStringWrapper uriProperty = new ReadOnlyStringWrapper(this, "uri");
  
  public String getUri() {
    return this.uriProperty.get();
  }
  
  public ReadOnlyStringProperty uriProperty() {
    return this.uriProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper nameProperty = new ReadOnlyStringWrapper(this, "name");
  
  public String getName() {
    return this.nameProperty.get();
  }
  
  public ReadOnlyStringProperty nameProperty() {
    return this.nameProperty.getReadOnlyProperty();
  }
}
