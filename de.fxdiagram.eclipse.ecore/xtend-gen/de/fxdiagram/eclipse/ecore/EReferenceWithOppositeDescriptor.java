package de.fxdiagram.eclipse.ecore;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.eclipse.ecore.EReferenceWithOpposite;
import de.fxdiagram.eclipse.ecore.EcoreDomainObjectProvider;
import de.fxdiagram.mapping.AbstractMappedElementDescriptor;
import de.fxdiagram.mapping.IMappedElementDescriptorProvider;
import java.util.NoSuchElementException;
import javafx.beans.property.ReadOnlyStringProperty;
import javafx.beans.property.ReadOnlyStringWrapper;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;

@ModelNode({ "uri", "name", "oppositeUri" })
@SuppressWarnings("all")
public class EReferenceWithOppositeDescriptor extends AbstractMappedElementDescriptor<EReferenceWithOpposite> {
  public EReferenceWithOppositeDescriptor(final String uri, final String name, final String oppositeUri, final String oppositeName, final String mappingConfigID, final String mappingID) {
    super(mappingConfigID, mappingID);
    this.oppositeUriProperty.set(uri);
    this.nameProperty.set(((name + "-") + oppositeName));
    this.uriProperty.set(uri);
  }
  
  @Override
  public EcoreDomainObjectProvider getProvider() {
    IMappedElementDescriptorProvider _provider = super.getProvider();
    return ((EcoreDomainObjectProvider) _provider);
  }
  
  @Override
  public <U extends Object> U withDomainObject(final Function1<? super EReferenceWithOpposite, ? extends U> lambda) {
    final EObject element = this.getProvider().resolveEObject(this.getUri());
    if ((element instanceof EReference)) {
      EReferenceWithOpposite _eReferenceWithOpposite = new EReferenceWithOpposite(((EReference)element));
      return lambda.apply(_eReferenceWithOpposite);
    } else {
      String _uri = this.getUri();
      String _plus = ("Cannot resolve EReference " + _uri);
      throw new NoSuchElementException(_plus);
    }
  }
  
  @Override
  public Object openInEditor(final boolean select) {
    IEditingDomainProvider _xblockexpression = null;
    {
      final URI theURI = URI.createURI(this.getUri());
      _xblockexpression = this.getProvider().openEditor(theURI, select);
    }
    return _xblockexpression;
  }
  
  @Override
  public boolean equals(final Object obj) {
    if ((obj instanceof EReferenceWithOppositeDescriptor)) {
      return ((Objects.equal(((EReferenceWithOppositeDescriptor)obj).getUri(), this.getUri()) && Objects.equal(((EReferenceWithOppositeDescriptor)obj).getOppositeUri(), this.getOppositeUri())) || (Objects.equal(((EReferenceWithOppositeDescriptor)obj).getOppositeUri(), this.getUri()) && Objects.equal(((EReferenceWithOppositeDescriptor)obj).getUri(), this.getOppositeUri())));
    } else {
      return false;
    }
  }
  
  @Override
  public int hashCode() {
    int _hashCode = super.hashCode();
    int _hashCode_1 = this.getUri().hashCode();
    String _oppositeUri = this.getOppositeUri();
    int _hashCode_2 = 0;
    if (_oppositeUri!=null) {
      _hashCode_2=_oppositeUri.hashCode();
    }
    int _plus = (_hashCode_1 + _hashCode_2);
    int _multiply = (563 * _plus);
    return (_hashCode + _multiply);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public EReferenceWithOppositeDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(uriProperty, String.class);
    modelElement.addProperty(nameProperty, String.class);
    modelElement.addProperty(oppositeUriProperty, String.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private ReadOnlyStringWrapper uriProperty = new ReadOnlyStringWrapper(this, "uri");
  
  public String getUri() {
    return this.uriProperty.get();
  }
  
  public ReadOnlyStringProperty uriProperty() {
    return this.uriProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper oppositeUriProperty = new ReadOnlyStringWrapper(this, "oppositeUri");
  
  public String getOppositeUri() {
    return this.oppositeUriProperty.get();
  }
  
  public ReadOnlyStringProperty oppositeUriProperty() {
    return this.oppositeUriProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper nameProperty = new ReadOnlyStringWrapper(this, "name");
  
  public String getName() {
    return this.nameProperty.get();
  }
  
  public ReadOnlyStringProperty nameProperty() {
    return this.nameProperty.getReadOnlyProperty();
  }
}
