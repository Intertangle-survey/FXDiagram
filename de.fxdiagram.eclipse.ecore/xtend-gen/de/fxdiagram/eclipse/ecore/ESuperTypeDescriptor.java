package de.fxdiagram.eclipse.ecore;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.eclipse.ecore.ESuperType;
import de.fxdiagram.eclipse.ecore.EcoreDomainObjectProvider;
import de.fxdiagram.mapping.AbstractMappedElementDescriptor;
import de.fxdiagram.mapping.IMappedElementDescriptorProvider;
import java.util.NoSuchElementException;
import javafx.beans.property.ReadOnlyStringProperty;
import javafx.beans.property.ReadOnlyStringWrapper;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;

@ModelNode({ "subTypeUri", "superTypeUri", "name" })
@SuppressWarnings("all")
public class ESuperTypeDescriptor extends AbstractMappedElementDescriptor<ESuperType> {
  public ESuperTypeDescriptor(final String subTypeUri, final String subTypeName, final String superTypeUri, final String superTypeName, final String mappingConfigID, final String mappingID) {
    super(mappingConfigID, mappingID);
    this.subTypeUriProperty.set(subTypeUri);
    this.superTypeUriProperty.set(superTypeUri);
    this.nameProperty.set(((subTypeName + "->") + superTypeName));
  }
  
  @Override
  public EcoreDomainObjectProvider getProvider() {
    IMappedElementDescriptorProvider _provider = super.getProvider();
    return ((EcoreDomainObjectProvider) _provider);
  }
  
  @Override
  public <U extends Object> U withDomainObject(final Function1<? super ESuperType, ? extends U> lambda) {
    final EObject subType = this.getProvider().resolveEObject(this.getSubTypeUri());
    final EObject superType = this.getProvider().resolveEObject(this.getSuperTypeUri());
    if ((subType instanceof EClass)) {
      if ((superType instanceof EClass)) {
        boolean _isSuperTypeOf = ((EClass)superType).isSuperTypeOf(((EClass)subType));
        if (_isSuperTypeOf) {
          final ESuperType eSuperType = new ESuperType(((EClass)subType), ((EClass)superType));
          return lambda.apply(eSuperType);
        }
      }
    }
    String _subTypeUri = this.getSubTypeUri();
    String _plus = ("Cannot resolve ESupertType " + _subTypeUri);
    String _plus_1 = (_plus + "->");
    String _superTypeUri = this.getSuperTypeUri();
    String _plus_2 = (_plus_1 + _superTypeUri);
    throw new NoSuchElementException(_plus_2);
  }
  
  @Override
  public Object openInEditor(final boolean select) {
    IEditingDomainProvider _xblockexpression = null;
    {
      final URI theURI = URI.createURI(this.getSubTypeUri());
      _xblockexpression = this.getProvider().openEditor(theURI, select);
    }
    return _xblockexpression;
  }
  
  @Override
  public boolean equals(final Object obj) {
    if ((obj instanceof ESuperTypeDescriptor)) {
      return (Objects.equal(((ESuperTypeDescriptor)obj).getSubTypeUri(), this.getSubTypeUri()) && Objects.equal(((ESuperTypeDescriptor)obj).getSuperTypeUri(), this.getSuperTypeUri()));
    } else {
      return false;
    }
  }
  
  @Override
  public int hashCode() {
    int _hashCode = super.hashCode();
    int _hashCode_1 = this.getSubTypeUri().hashCode();
    int _multiply = (563 * _hashCode_1);
    int _plus = (_hashCode + _multiply);
    int _hashCode_2 = this.getSuperTypeUri().hashCode();
    int _multiply_1 = (547 * _hashCode_2);
    return (_plus + _multiply_1);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public ESuperTypeDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(subTypeUriProperty, String.class);
    modelElement.addProperty(superTypeUriProperty, String.class);
    modelElement.addProperty(nameProperty, String.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private ReadOnlyStringWrapper subTypeUriProperty = new ReadOnlyStringWrapper(this, "subTypeUri");
  
  public String getSubTypeUri() {
    return this.subTypeUriProperty.get();
  }
  
  public ReadOnlyStringProperty subTypeUriProperty() {
    return this.subTypeUriProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper superTypeUriProperty = new ReadOnlyStringWrapper(this, "superTypeUri");
  
  public String getSuperTypeUri() {
    return this.superTypeUriProperty.get();
  }
  
  public ReadOnlyStringProperty superTypeUriProperty() {
    return this.superTypeUriProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper nameProperty = new ReadOnlyStringWrapper(this, "name");
  
  public String getName() {
    return this.nameProperty.get();
  }
  
  public ReadOnlyStringProperty nameProperty() {
    return this.nameProperty.getReadOnlyProperty();
  }
}
