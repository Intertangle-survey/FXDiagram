package de.fxdiagram.eclipse.xtext.ids;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.eclipse.xtext.ids.AbstractXtextEObjectID;
import java.util.NoSuchElementException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@ModelNode
@SuppressWarnings("all")
public class UnnamedXtextEObjectID extends AbstractXtextEObjectID {
  public UnnamedXtextEObjectID(final EClass eClass, final URI elementURI) {
    super(eClass, elementURI);
  }
  
  @Override
  public QualifiedName getQualifiedName() {
    return null;
  }
  
  @Override
  public IEObjectDescription findInIndex(final IResourceDescriptions index) {
    IEObjectDescription _xblockexpression = null;
    {
      URI _uRI = this.getURI();
      URI _trimFragment = _uRI.trimFragment();
      final IResourceDescription resourceDescription = index.getResourceDescription(_trimFragment);
      EClass _eClass = this.getEClass();
      Iterable<IEObjectDescription> _exportedObjectsByType = resourceDescription.getExportedObjectsByType(_eClass);
      final Function1<IEObjectDescription, Boolean> _function = (IEObjectDescription it) -> {
        URI _uRI_1 = this.getURI();
        URI _eObjectURI = it.getEObjectURI();
        return Boolean.valueOf(Objects.equal(_uRI_1, _eObjectURI));
      };
      _xblockexpression = IterableExtensions.<IEObjectDescription>findFirst(_exportedObjectsByType, _function);
    }
    return _xblockexpression;
  }
  
  @Override
  public EObject resolve(final ResourceSet resourceSet) {
    URI _uRI = this.getURI();
    final EObject element = resourceSet.getEObject(_uRI, true);
    if ((Objects.equal(element, null) || element.eIsProxy())) {
      URI _uRI_1 = this.getURI();
      String _plus = ("Could not resolve " + _uRI_1);
      throw new NoSuchElementException(_plus);
    }
    EClass _eClass = this.getEClass();
    boolean _isInstance = _eClass.isInstance(element);
    boolean _not = (!_isInstance);
    if (_not) {
      EClass _eClass_1 = this.getEClass();
      String _name = _eClass_1.getName();
      String _plus_1 = ("Expected " + _name);
      String _plus_2 = (_plus_1 + " but got ");
      EClass _eClass_2 = element.eClass();
      String _name_1 = _eClass_2.getName();
      String _plus_3 = (_plus_2 + _name_1);
      throw new NoSuchElementException(_plus_3);
    }
    return element;
  }
  
  @Override
  public boolean equals(final Object obj) {
    if ((obj instanceof UnnamedXtextEObjectID)) {
      return (super.equals(obj) && Objects.equal(this.getURI(), ((UnnamedXtextEObjectID)obj).getURI()));
    } else {
      return false;
    }
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public UnnamedXtextEObjectID() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
  
  public String toString() {
    return ToString.toString(this);
  }
}
