package de.fxdiagram.lib.simple;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.XNode;
import de.fxdiagram.core.anchors.Anchors;
import de.fxdiagram.core.model.DomainObjectDescriptor;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.lib.anchors.EllipseAnchors;
import javafx.scene.Node;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ModelNode
@SuppressWarnings("all")
public class SmallDotNode extends XNode {
  public SmallDotNode(final DomainObjectDescriptor domainObject) {
    super(domainObject);
  }
  
  @Override
  protected Node createNode() {
    Circle _circle = new Circle();
    final Procedure1<Circle> _function = (Circle it) -> {
      it.setRadius(7);
      it.setFill(Color.HONEYDEW);
      it.setStroke(Color.BLACK);
    };
    return ObjectExtensions.<Circle>operator_doubleArrow(_circle, _function);
  }
  
  @Override
  protected Anchors createAnchors() {
    return new EllipseAnchors(this);
  }
  
  @Override
  public String getName() {
    return "foo";
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public SmallDotNode() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
}
