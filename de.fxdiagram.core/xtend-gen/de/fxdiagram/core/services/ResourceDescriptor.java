package de.fxdiagram.core.services;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.core.services.ClassLoaderDescriptor;
import de.fxdiagram.core.services.ClassLoaderProvider;
import javafx.beans.property.ReadOnlyStringProperty;
import javafx.beans.property.ReadOnlyStringWrapper;

@ModelNode({ "name", "absolutePath" })
@SuppressWarnings("all")
public class ResourceDescriptor extends ClassLoaderDescriptor {
  public ResourceDescriptor(final String classLoaderID, final String relativePath, final String name, final ClassLoaderProvider provider) {
    super(classLoaderID, provider);
    this.absolutePathProperty.set(relativePath);
    this.nameProperty.set(name);
  }
  
  public String toURI() {
    return super.toURI(this.getAbsolutePath());
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public ResourceDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(nameProperty, String.class);
    modelElement.addProperty(absolutePathProperty, String.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private ReadOnlyStringWrapper absolutePathProperty = new ReadOnlyStringWrapper(this, "absolutePath");
  
  public String getAbsolutePath() {
    return this.absolutePathProperty.get();
  }
  
  public ReadOnlyStringProperty absolutePathProperty() {
    return this.absolutePathProperty.getReadOnlyProperty();
  }
  
  private ReadOnlyStringWrapper nameProperty = new ReadOnlyStringWrapper(this, "name");
  
  public String getName() {
    return this.nameProperty.get();
  }
  
  public ReadOnlyStringProperty nameProperty() {
    return this.nameProperty.getReadOnlyProperty();
  }
}
