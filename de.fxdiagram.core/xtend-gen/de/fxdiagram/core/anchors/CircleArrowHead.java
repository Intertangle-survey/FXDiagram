package de.fxdiagram.core.anchors;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.XConnection;
import de.fxdiagram.core.anchors.ArrowHead;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.scene.Node;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.StrokeType;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ModelNode("fill")
@SuppressWarnings("all")
public class CircleArrowHead extends ArrowHead {
  public CircleArrowHead(final XConnection connection, final double radius, final Paint stroke, final Paint fill, final boolean isSource) {
    super(connection, radius, radius, stroke, isSource);
    boolean _notEquals = (!Objects.equal(fill, null));
    if (_notEquals) {
      this.setFill(fill);
    }
    DoubleProperty _heightProperty = this.heightProperty();
    DoubleProperty _widthProperty = this.widthProperty();
    _heightProperty.bindBidirectional(_widthProperty);
  }
  
  public CircleArrowHead(final XConnection connection, final boolean isSource) {
    this(connection, 4, null, null, isSource);
  }
  
  @Override
  public Node createNode() {
    Circle _xblockexpression = null;
    {
      Paint _fill = this.getFill();
      boolean _equals = Objects.equal(_fill, null);
      if (_equals) {
        XConnection _connection = this.getConnection();
        ObjectProperty<Paint> _strokeProperty = _connection.strokeProperty();
        this.fillProperty.bind(_strokeProperty);
      }
      Circle _circle = new Circle();
      final Procedure1<Circle> _function = (Circle it) -> {
        double _width = this.getWidth();
        it.setRadius(_width);
        double _radius = it.getRadius();
        double _minus = (-_radius);
        it.setLayoutX(_minus);
        it.setLayoutY(0);
        ObjectProperty<Paint> _fillProperty = it.fillProperty();
        _fillProperty.bind(this.fillProperty);
        ObjectProperty<Paint> _strokeProperty_1 = it.strokeProperty();
        ObjectProperty<Paint> _strokeProperty_2 = this.strokeProperty();
        _strokeProperty_1.bind(_strokeProperty_2);
        DoubleProperty _strokeWidthProperty = it.strokeWidthProperty();
        XConnection _connection_1 = this.getConnection();
        DoubleProperty _strokeWidthProperty_1 = _connection_1.strokeWidthProperty();
        _strokeWidthProperty.bind(_strokeWidthProperty_1);
        DoubleProperty _opacityProperty = it.opacityProperty();
        XConnection _connection_2 = this.getConnection();
        DoubleProperty _opacityProperty_1 = _connection_2.opacityProperty();
        _opacityProperty.bind(_opacityProperty_1);
        it.setStrokeType(StrokeType.CENTERED);
      };
      _xblockexpression = ObjectExtensions.<Circle>operator_doubleArrow(_circle, _function);
    }
    return _xblockexpression;
  }
  
  @Override
  public double getLineCut() {
    double _width = this.getWidth();
    XConnection _connection = this.getConnection();
    double _strokeWidth = _connection.getStrokeWidth();
    return (_width + _strokeWidth);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public CircleArrowHead() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(fillProperty, Paint.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private SimpleObjectProperty<Paint> fillProperty = new SimpleObjectProperty<Paint>(this, "fill");
  
  public Paint getFill() {
    return this.fillProperty.get();
  }
  
  public void setFill(final Paint fill) {
    this.fillProperty.set(fill);
  }
  
  public ObjectProperty<Paint> fillProperty() {
    return this.fillProperty;
  }
}
