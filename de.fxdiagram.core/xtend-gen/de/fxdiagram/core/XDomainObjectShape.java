package de.fxdiagram.core;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.XDomainObjectOwner;
import de.fxdiagram.core.XShape;
import de.fxdiagram.core.model.DomainObjectDescriptor;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.core.model.XModelProvider;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.beans.property.ReadOnlyObjectWrapper;

@ModelNode("domainObjectDescriptor")
@SuppressWarnings("all")
public abstract class XDomainObjectShape extends XShape implements XDomainObjectOwner, XModelProvider {
  public XDomainObjectShape(final DomainObjectDescriptor descriptor) {
    this.domainObjectDescriptorProperty.set(descriptor);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public XDomainObjectShape() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    modelElement.addProperty(domainObjectDescriptorProperty, DomainObjectDescriptor.class);
  }
  
  public void postLoad() {
    
  }
  
  public String toString() {
    return ToString.toString(this);
  }
  
  private ReadOnlyObjectWrapper<DomainObjectDescriptor> domainObjectDescriptorProperty = new ReadOnlyObjectWrapper<DomainObjectDescriptor>(this, "domainObjectDescriptor");
  
  public DomainObjectDescriptor getDomainObjectDescriptor() {
    return this.domainObjectDescriptorProperty.get();
  }
  
  public ReadOnlyObjectProperty<DomainObjectDescriptor> domainObjectDescriptorProperty() {
    return this.domainObjectDescriptorProperty.getReadOnlyProperty();
  }
}
